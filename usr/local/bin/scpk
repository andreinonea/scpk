#!/bin/bash

# Secure Copy Protocol Kilburn
# Copyright (c) 2019 Andrei Onea
name="Secure Copy Protocol Kilburn"
version="1.3"
configPath=~/.scpk_config


# Kill the process and send a message to stderr
err() 
{
  echo -e "$1" >&2
  echo "Run 'scpk --help' for more information"
  exit 1
}


# Greeting message if config is not created
printConfigGreeter()
{
  echo "######################################"
  echo "#### Secure Copy Protocol Kilburn ####"
  echo "####             UoM              ####"
  echo "####                              ####"
  echo "####     First time when run      ####"
  echo "#### config file must be created. ####"
  echo "####     After writing your id,   ####"
  echo "####     the script will exit.    ####"
  echo "####    Re-run it and know that   ####"
  echo "####  you can change it any time  ####"
  echo "####     using 'scpk changeid.    ####"
  echo "####      'Use 'scpk --help'      ####"
  echo "####        or simply 'scpk'      ####"
  echo "####        for more details      ####"
  echo "####        about the script      ####"
  echo "####                              ####"
  echo "####             v1.3             ####"  
  echo "####       (c) Andrei Onea        ####"
  echo "######################################"
  echo
}


# Output of --help arg
printHelpMenuThenExit()
{
  echo "Usage: scpk [-options] to kilburn_path (~/ included) local_path"
  echo "         (to copy to kilburn from local)"
  echo "   or  scpk [-options] from kilburn_path (~/ included) local_path"
  echo "         (to copy from kilburn to local)"
  echo "   or  scpk changeid"
  echo "         (to change the id used in the config)"
  echo "where options include:"
  echo "     --help      -h      displays this prompt"
  echo "     --recursive -r      copies all the files in all directories inside"
  echo "     --verbose   -v      requests verbose output from 'scp'"
  echo "                         (probably never going to use this)"
  echo "     --version           displays the current version of the script"
  echo "See 'man scpk' for more details."
  exit
}


# Retrieves an ID and saves it in the config
setStudentIdThenExit()
{
  userRecord="$(getent passwd $USER)"
  userGecosField="$(echo "$userRecord" | cut -d ':' -f 5)"
  userFullName="$(echo "$userGecosField" | cut -d ',' -f 1)"
  echo "Hello, $userFullName!"
  echo -n "Please input your student id: "
  read id
  while ! [[ $id =~ ^[a-z][0-9]{5}[a-z]{2}$ ]]; do
    echo -n "Please input a valid student id: "
    read id
  done
  echo "$id@kilburn.cs.man.ac.uk:~/" > $configPath
  echo -e "\e[1mscpk: \e[38;5;2msuccess\e[0m: config saved!"
  exit
}


# START


# If config does not exist, create one
if [ ! -f $configPath ]; then
  printConfigGreeter
  setStudentIdThenExit
fi


# Best practice to initialize variables to avoid
# confusion with environment variables (if any)
host=$(cat $configPath)
cmd=""
recursive=""
verbose=""


# Logic for diferentiating flags from arguments
# and flags implementation (which does what)
if [ $# -eq 0 ]; then
  printHelpMenuThenExit
elif [ $# -eq 1 ]; then
  case $1 in
      -h | --help)
          printHelpMenuThenExit
          ;;
      --version)
          echo "$name : version $version"
          exit
          ;;
      changeid)
          setStudentIdThenExit
          ;;
      to | from)
          err "\e[1mscpk: \e[38;5;191minfo\e[0m: Please provide valid file paths for server and local machine"
          ;;
      *)
          err "\e[1mscpk: \e[38;5;9merror\e[0m:  IllegalArgument caused by: '$1'"
  esac
elif [ $# -eq 2 ]; then
  while ! [ $# -eq 0 ]; do
    case $1 in
        to | from)
            err "\e[1mscpk: \e[38;5;191minfo\e[0m: Please provide valid file paths for server and local machine"
            ;;
        -v | --verbose)
            if [ "$1" == "$2" ]; then
              err "\e[38;5;28mscpk\e[0m: error: DuplicateArguments caused by: ('$1', '$2')"
            fi
            verbose="-v"
            ;;
        -r | --recursive)
            if [ "$1" == "$2" ]; then
              err "\e[1mscpk: \e[38;5;9merror\e[0m:  DuplicateArguments caused by: ('$1', '$2')"
            fi
            recursive="-r"
            ;;
        *)
            err "\e[1mscpk: \e[38;5;9merror\e[0m:  IllegalArgument caused by: '$1'"
    esac
    shift
  done
elif [ $# -ge 3 ]; then
  while :; do
    case $1 in
        to | from)
            break
            ;;
        -v | --verbose)
            if [ "$1" == "$2" ]; then
              err "\e[1mscpk: \e[38;5;9merror\e[0m:  DuplicateArguments caused by: ('$1', '$2')"
            fi
            verbose="-v"
            ;;
        -r | --recursive)
            if [ "$1" == "$2" ]; then
              err "\e[1mscpk: \e[38;5;9merror\e[0m:  DuplicateArguments caused by: ('$1', '$2')"
            fi
            recursive="-r"
            ;;
        *)
            err "\e[1mscpk: \e[38;5;9merror\e[0m:  IllegalArgument caused by: '$1'"
    esac
    shift
  done
fi


# After all flags are removed, check the state
# of the actual arguments and print sensible messages
# Based on the host being the source or the target,
# generate a string to be used when calling 'scp'
if [ $# -eq 0 ]; then
  err "\e[1mscpk: \e[38;5;9merror\e[0m:  NotEnoughArguments"
elif [ $# -eq 1 ]; then
  err "\e[1mscpk: \e[38;5;191minfo\e[0m: Please provide valid file paths for server and local machine"
elif [ $# -eq 2 ]; then
  err "\e[1mscpk: \e[38;5;191minfo\e[0m: Please provide valid file path for local machine"
elif [ $# -eq 3 ]; then
  if [ "$1" == "to" ]; then
    action="sent"
    cmd="$3 $host$2"
  elif [ "$1" == "from" ]; then
    action="retrieved"
    cmd="$host$2 $3"
  else
    err "\e[1mscpk: \e[38;5;9merror\e[0m:  Unforeseen event happened"
  fi
else
  err "\e[1mscpk: \e[38;5;9merror\e[0m:  TooManyArguments"
fi


# Final call
scp $verbose $recursive $cmd
if [ $? -eq 0 ]; then
  echo -e "\e[1mscpk: \e[38;5;2msuccess\e[0m: file(s) $action!"
else
	err "\e[1mscpk: \e[38;5;9merror\e[0m: There was a problem with the transfer"
fi


# END
